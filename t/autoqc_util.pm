package t::autoqc_util;

use strict;
use warnings;
use Carp;
use English qw(-no_match_vars);
use Exporter;

our @ISA       = qw(Exporter);
our @EXPORT_OK = qw(
                      write_bwa_script
                      write_samtools_script
                   );

sub write_samtools_script {
  my ($script_path, $b1) = @_;
  
  open my $fh, '>', $script_path or croak "Cannot open $script_path for writing";

  print $fh '#!/usr/local/bin/bash';
  print $fh "\n";
  print $fh '# Script to fake samtools in testing. Automatically generated by npg at ' . time;
  print $fh "\n";

  if (defined $b1) {
    print $fh "cat $b1\n";
  }else{
    print $fh "echo 'Version: 0.5.5 (r1273)'\n";
  }

  close $fh or carp "Cannot close $script_path";
    
  chmod 0775, $script_path;
  return 1;
}

sub write_fastx_script {

  my ($script_path, $b1) = @_;
  
  my $fh;
  open($fh, '>', $script_path) or croak "Cannot open $script_path for writing";

  print $fh '#!/usr/local/bin/bash';
  print $fh "\n";
  print $fh '# Script to fake fastx in testing. Automatically generated by npg at ' . time;
  print $fh "\n";

  # echo the first argument $1;
  # echo number of arguments: $#;
  if (!defined $b1) {
    my $out = q[usage: fastx_reverse_complement [-h] [-r] [-z] [-v] [-i INFILE] [-o OUTFILE]
Part of FASTX Toolkit 0.0.12 by A. Gordon (gordon@cshl.edu)

   [-h]         = This helpful help screen.
   [-z]         = Compress output with GZIP.
   [-i INFILE]  = FASTA/Q input file. default is STDIN.
   [-o OUTFILE] = FASTA/Q output file. default is STDOUT.

];

    print $fh "echo '$out'";
  }

  close $fh;
    
  chmod 0775, $script_path;
  return 1;
}

sub write_bwa_script {

  my ($script_path, $s1, $bwa_version) = @_;
  
  my $fh;
  open($fh, '>', $script_path) or croak "Cannot open $script_path for writing";

  print $fh '#!/usr/local/bin/bash';
  print $fh "\n";
  print $fh '# Script to fake BWA tool in testing. Automatically generated by npg at ' . time;
  print $fh "\n";

  # echo the first argument $1;
  # echo number of arguments: $#;
  if (defined $s1) {
    print $fh 'if [ $# != 0 ]; then';
    print $fh "\n";
    print $fh 'if [ $1 == sampe ]; then';
    print $fh "\n";
    print $fh "cat $s1\n";
    print $fh "fi\n";
    print $fh "else\n";
    print $fh "echo 'Version: 0.5.5 (r1273)'\n";
    print $fh "fi\n";
  }else{
    print $fh "echo 'Version: 0.5.5 (r1273)'\n";
  }

  close $fh;
    
  chmod 0775, $script_path;
  return 1;
}

1;
